/*
Author: Gajendra 
Github: https://github.com/gajendra0180
linkedin: https://www.linkedin.com/in/gajendra0180/
leetcode: https://leetcode.com/gajendra0180/
*/
const makeSeats = (input) => {
    const maxColumns = Math.max(...input.map(arr => arr[1]));
    const seats = [];
    for (let colI = 0; colI < maxColumns; colI++) {
        let block = [];
        input.forEach(arr => {
            const row = arr[0];
            let col = arr[1];

            for (let i = 0; i < row; i++) {
                if (col - colI > 0) {
                    block.push('seat');
                } else {
                    block.push('empty');
                }
            }
            block.push('space');
        });
        block = block.slice(0, -1);
        seats.push(block);
    }
    return seats;
}

const assignAisleSeats = (seat, cust) => {
    let seats = [...seat];
    seats.forEach((row, rowI) => {
        row.forEach((seat, seatI) => {
            if (cust.remainingPassengers < 1) {
                return;
            }
            if (seatI > 0 && seatI < row.length) {
                if (seat === 'seat' && (row[seatI - 1] === 'space' || row[seatI + 1] === 'space')) {
                    seats[rowI][seatI] = cust.nextSeatNumber;
                    cust.nextSeatNumber++;
                    cust.remainingPassengers--;
                }
            }
        });
    });
    return seats;
}

const assignWindowSeats = (seat, cust) => {
    let seats = [...seat];
    seats.forEach((row, rowI) => {
        row.forEach((seat, seatI) => {
            if (cust.remainingPassengers < 1) {
                return;
            }
            if (seat === 'seat' && (seatI === 0 || seatI === row.length - 1)) {
                seats[rowI][seatI] = cust.nextSeatNumber;
                cust.nextSeatNumber++;
                cust.remainingPassengers--;
            }
        });
    });
    return seats
}

const assignMiddleSeats = (seat, cust) => {
    let seats = [...seat];
    seats.forEach((row, rowI) => {
        row.forEach((seat, seatI) => {
            if (cust.remainingPassengers < 1) {
                return;
            }
            if (
                seat === 'seat' &&
                !(
                    seatI === 0 ||
                    seatI === row.length - 1 ||
                    row[seatI - 1] === 'space' ||
                    row[seatI + 1] === 'space'
                )
            ) {
                seats[rowI][seatI] = cust.nextSeatNumber;
                cust.nextSeatNumber++;
                cust.remainingPassengers--;
            }
        });
    });
    return seats
}

const airplaneSeating = (input, passengers) => {
    let seats = makeSeats(input);
    let remainingPassengers = passengers;
    let nextSeatNumber = 1;
    let obj = {
        nextSeatNumber: nextSeatNumber,
        remainingPassengers: remainingPassengers
    };
    let assigned_seats = assignAisleSeats(seats, obj);
    let assigned_seats_window = assignWindowSeats(assigned_seats, obj);
    let all_assigned_seats = assignMiddleSeats(assigned_seats_window, obj);
    console.log('all_assigned_seats :>> ', all_assigned_seats);
}

airplaneSeating([[3, 4], [4, 5], [2, 3], [3, 4]], 30)
